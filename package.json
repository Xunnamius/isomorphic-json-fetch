{
  "name": "isomorphic-json-fetch",
  "version": "1.0.15",
  "description": "A small wrapper around unfetch geared specifically for handling JSON",
  "keywords": [
    "isomorphic",
    "json",
    "fetch",
    "unfetch"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Xunnamius/isomorphic-json-fetch"
  },
  "license": "Unlicense",
  "author": "Xunnamius",
  "sideEffects": false,
  "type": "commonjs",
  "exports": {
    ".": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.js",
      "default": "./dist/index.js"
    },
    "./package": "./package.json",
    "./package.json": "./package.json"
  },
  "main": "./dist/index",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "/dist",
    "/LICENSE",
    "/package.json",
    "/README.md"
  ],
  "scripts": {
    "build": "npm run build-dist",
    "build-dist": "npm run clean && NODE_ENV=production tsc --project tsconfig.types.json && NODE_ENV=production webpack --config-name main && NODE_ENV=esm babel src --extensions .ts --out-dir dist --out-file-extension .mjs && { echo -n '\"undefined\"!=typeof window&&(window.global=window);'; cat dist/index.js; } > dist/index.js-tmp && mv -f dist/index.js-tmp dist/index.js",
    "build-docs": "ENTRY=`node -e 'console.log((x => typeof x==\"string\"?x:x.default)(require(\"./package.json\").exports[\".\"]).replace(/\\.\\/dist\\/(.+)\\.[a-zA-Z0-9]+$/, \"./src/$1.ts\"))'` && echo 'Entry file:' \"$ENTRY\" && typedoc --plugin typedoc-plugin-markdown --out docs --readme none $ENTRY && find docs -name '*.md' -exec sed -i -e 's/`__namedParameters`: //g' {} + && find docs -name '*.md' -exec sed -i -E 's/^.\\s*(\\*\\*)?__namedParameters(\\*\\*)?/`\\(destructured\\)/gm' {} + && find docs -name '*.md' -exec sed -i -E 's/^.\\s*\\(destructured\\)\\.([a-zA-Z0-9_?-]+)/`\\({ \\1 }\\)/gm' {} + && find docs -name '*.md' -exec sed -i -e 's/Project: //g' {} + && sed -i -e 1,4d docs/README.md",
    "build-stats": "NODE_ENV=production webpack --config-name main --json > bundle-stats.json",
    "lint": "rm -f npm.pipe; touch npm.pipe; command -v unbuffer >/dev/null; X=$?; [ $X -eq 0 ] && unbuffer tsc --project tsconfig.lint.json >> npm.pipe; Y=$?; [ $Y -eq 0 ] && echo >> npm.pipe; unbuffer eslint --parser-options=project:tsconfig.lint.json src >> npm.pipe; Z=$?; [ $X -ne 0 ] && tsc --project tsconfig.lint.json >> npm.pipe && eslint --parser-options=project:tsconfig.lint.json src >> npm.pipe; W=$?; cat npm.pipe | less -R -FX; rm npm.pipe; [ $W -eq 0 ] && [ $X -eq 1 ] || [ $X -eq 0 ] && [ $Y -eq 0 ] && [ $Z -eq 0 ]",
    "check-build": "test -d dist || npm run build; BABEL_ENV=test jest test/integration.test.ts",
    "clean": "rm -rf dist npm.pipe coverage external-scripts/bin",
    "fixup": "npm run lint && npm run test && npm run build && npm run check-build && npx npm-force-resolutions && npx Xunnamius/sort-package-json && npm run build-docs && npm audit",
    "list-tasks": "npm run",
    "prepublishOnly": "npm run build",
    "postpublish": "npm run clean",
    "repl": "command -v rlwrap >/dev/null && rlwrap npx -p @babel/core -p @babel/node babel-node",
    "semantic-release": "semantic-release",
    "test": "npm run test-unit",
    "test-unit": "BABEL_ENV=test jest --coverage --testPathIgnorePatterns=test/integration.test.ts",
    "test-integration-node": "BABEL_ENV=test jest test/integration.test.ts",
    "test-integration-chrome": "BABEL_ENV=test jest test/integration.test.ts"
  },
  "dependencies": {
    "isomorphic-unfetch": "^3.1.0"
  },
  "devDependencies": {
    "@babel/cli": "^7.13.16",
    "@babel/core": "^7.13.16",
    "@babel/plugin-proposal-export-default-from": "^7.12.13",
    "@babel/plugin-proposal-function-bind": "^7.12.13",
    "@babel/preset-env": "^7.13.15",
    "@babel/preset-typescript": "^7.13.0",
    "@ergodark/types": "^1.0.17",
    "@semantic-release/changelog": "^5.0.1",
    "@semantic-release/git": "^9.0.0",
    "@types/confusing-browser-globals": "^1.0.0",
    "@types/expect-puppeteer": "^4.4.5",
    "@types/jest": "^26.0.22",
    "@types/node": "^14.14.41",
    "@types/puppeteer": "^5.4.3",
    "@types/test-listen": "^1.1.0",
    "@types/webpack": "^5.28.0",
    "@typescript-eslint/eslint-plugin": "^4.22.0",
    "@typescript-eslint/parser": "^4.22.0",
    "babel-eslint": "^10.1.0",
    "babel-jest": "^26.6.3",
    "babel-loader": "^8.2.2",
    "babel-plugin-source-map-support": "^2.1.3",
    "babel-plugin-transform-default-named-imports": "^1.0.9",
    "confusing-browser-globals": "^1.0.10",
    "eslint": "^7.24.0",
    "eslint-import-resolver-alias": "^1.1.2",
    "eslint-import-resolver-typescript": "^2.4.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-jest": "^24.3.5",
    "jest": "^26.6.3",
    "jest-circus": "^26.6.3",
    "jest-extended": "^0.11.5",
    "puppeteer": "^8.0.0",
    "semantic-release": "^17.4.2",
    "source-map-support": "^0.5.19",
    "test-listen": "^1.1.0",
    "type-fest": "^1.0.2",
    "typedoc": "0.22.7",
    "typedoc-plugin-markdown": "^3.7.1",
    "typescript": "^4.2.4",
    "webpack": "^5.35.0",
    "webpack-cli": "^4.6.0",
    "webpack-node-module-types": "^1.0.7"
  },
  "engines": {
    "node": ">= 10.x"
  }
}
